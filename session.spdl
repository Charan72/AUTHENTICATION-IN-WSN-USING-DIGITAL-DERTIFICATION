usertype SessionKey;
usertype TimeStamp;
usertype ExpiredTimeStamp;

const Fresh: Function;
const Compromised: Function;

protocol wmf(I,R,S)
{
    role I
    {
        fresh Kir: SessionKey;
        fresh Ti: TimeStamp;
        var Kr: SessionKey;

        send_1(I,S, I, {I, Ti, R, Kir}k(I,S)); 

        claim_I1(I,Secret,Kir);
        claim_I2(I,Empty,(Fresh,Kir));
    }    
    
    role R
    {
        var Ts: TimeStamp;
        var Kir: SessionKey;

        recv_2(S,R, {S, Ts, I, Kir}k(R,S) );

        claim_R1(R,Secret,Kir);
        claim_R2(R,Nisynch);
        claim_R3(R,Empty,(Fresh,Kir));
    }

    role S
    {
        var Kir: SessionKey;
        fresh Ts: TimeStamp;
        var Ti: TimeStamp;

        recv_1(I,S, I,{I, Ti, R, Kir}k(I,S) );
        send_2(S,R, {S, Ts, I, Kir}k(R,S));
    }
}