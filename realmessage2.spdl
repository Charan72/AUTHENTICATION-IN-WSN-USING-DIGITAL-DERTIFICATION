/*
*  Secrecy protocol
*  Uses asymetric encryption
*   Uses symetric encryption
*/
usertype  Message, Secretkey; 


const pk: Function;
secret sk: Function;
inversekeys(pk,sk);
const Ikey: Secretkey;
const Rkey: Secretkey;

                          

// Protocol description

                                                                                  
protocol ids(I, R, S)
{
role I
{
// const Ikey: Secretkey;
fresh mi:  Message;
var ts1: Ticket;

send_1(I,S,{I,mi}Ikey(I));
recv_2(S,I,{ts1}pk(S));
 
claim_I1(I,Secret,mi);
claim_I2(I,Secret,ts1);

}
role R
{

//  const Rkey:  Secretkey;
fresh mr:  Message;
var ts2: Ticket;

send_1(R,S,{R,mr}Rkey(R));
recv_2(S,R,{ts2}pk(S));
 
claim_R1(R,Secret,mr);
claim_R2(R,Secret,ts2);

}

role S

{


var mi:   Message;
fresh ts1:  Ticket;
var mr:   Message;
fresh ts2:  Ticket;


recv_1(I,S,{I,mi}Ikey(I));
send_2(S,I,{ts1}pk(S));
recv_3(R,S,{R,mr}Rkey(R));
send_4(S,R,{ts2}pk(S));


claim_s1(S,Secret,mi);
claim_s2(S,Secret,ts1);
claim_s3(S,Secret,mr);
claim_s4(S,Secret,ts2);
}
}